plugins {
    id 'java'
    id 'java-library'
    id 'checkstyle'
    id 'eclipse'
    // NOTE: external plugin version is specified in implementation dependency artifact of the project's build file
    id 'com.github.spotbugs'
}



eclipse {
    classpath {
       downloadSources=true
       downloadJavadoc = true
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

configurations {
    pmd
}

dependencies {
    pmd 'net.sourceforge.pmd:pmd-core:6.55.0'
    pmd 'net.sourceforge.pmd:pmd-doc:6.55.0'
    pmd 'net.sourceforge.pmd:pmd-java:6.55.0'
    pmd 'net.sourceforge.pmd:pmd-java8:6.55.0'
}

test
{
    useJUnitPlatform()
}

checkstyle {
    configFile = file("${rootDir}/config/checkstyle.xml")
    sourceSets = []
}

spotbugs {
    ignoreFailures = true
    toolVersion = '4.7.3'
    reportsDir = file("$buildDir/reports/spotbugs")
    effort = 'max'
    excludeFilter = file("${rootDir}/spotbugs-filter.xml")
}

spotbugsMain {
    reports {
        xml {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.xml")
            //withMessages = true
        }
        html {
            //withMessages = true
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

task cpd {
    doLast {
        project.mkdir("$buildDir/reports")
        ant.taskdef(name: "cpd",
                    classname: "net.sourceforge.pmd.cpd.CPDTask",
                    classpath: configurations.pmd.asPath
        )
        ant.cpd(minimumTokenCount: 100, outputFile: "$buildDir/reports/cpd.xml",
                format: "xml", encoding: "UTF-8", ignoreAnnotations: true) {
            fileset(dir: "src", includes: "**/*.java")
        }
    }
}
tasks.findAll { task -> task.name.startsWith("spotbugs")}.each { task -> task.enabled = gradle.startParameter.taskNames.contains(task.name) }
tasks.findAll { task -> task.name.startsWith("checkstyle")}.each { task -> task.enabled = gradle.startParameter.taskNames.contains(task.name) }
